/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { HotelService } from "../hotel.service";
import { HotelCreateInput } from "./HotelCreateInput";
import { Hotel } from "./Hotel";
import { HotelFindManyArgs } from "./HotelFindManyArgs";
import { HotelWhereUniqueInput } from "./HotelWhereUniqueInput";
import { HotelUpdateInput } from "./HotelUpdateInput";

export class HotelControllerBase {
  constructor(protected readonly service: HotelService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Hotel })
  async createHotel(@common.Body() data: HotelCreateInput): Promise<Hotel> {
    return await this.service.createHotel({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Hotel] })
  @ApiNestedQuery(HotelFindManyArgs)
  async hotels(@common.Req() request: Request): Promise<Hotel[]> {
    const args = plainToClass(HotelFindManyArgs, request.query);
    return this.service.hotels({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Hotel })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async hotel(
    @common.Param() params: HotelWhereUniqueInput
  ): Promise<Hotel | null> {
    const result = await this.service.hotel({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Hotel })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateHotel(
    @common.Param() params: HotelWhereUniqueInput,
    @common.Body() data: HotelUpdateInput
  ): Promise<Hotel | null> {
    try {
      return await this.service.updateHotel({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Hotel })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteHotel(
    @common.Param() params: HotelWhereUniqueInput
  ): Promise<Hotel | null> {
    try {
      return await this.service.deleteHotel({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
